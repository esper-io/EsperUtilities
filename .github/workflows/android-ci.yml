name: Android CI

# Define the permissions for the GITHUB_TOKEN
permissions:
  contents: write       # Allows read and write access to repository contents

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true

      # 2. Cache Gradle packages
      - name: Cache Gradle packages
        if: env.skip_build != 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 3. Check commit message to determine if build should be skipped
      - name: Check commit message
        id: check_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == "Increment versionCode to "* ]]; then
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "skip_build=false" >> $GITHUB_ENV

      # 4. Set up Java 17
      - name: Set up Java 17
        if: env.skip_build != 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 5. Set up Android SDK and NDK
      - name: Set up Android SDK and NDK
        if: env.skip_build != 'true'
        uses: android-actions/setup-android@v2
        with:
          sdk-version: '33.0.0'
          ndk-version: '27.0.11718014'
          distribution-type: 'sdk'
          build-tools: '33.0.0'

      # 6. Calculate the latest tag
      - name: Calculate Latest Tag
        id: calculate_tag
        run: |
          latest_tag=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 || echo "v1.01.0000")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      # 7. Set up signing keystore
      - name: Set up signing keystore
        if: env.skip_build != 'true'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | openssl base64 -d -A -out keystore.jks
          echo "Keystore file created in the root directory."

      # 8. Create signing.properties
      - name: Create signing.properties
        if: env.skip_build != 'true'
        run: |
          echo "storeFile=keystore.jks" > signing.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> signing.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> signing.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> signing.properties

      # 9. Inject API Key into gradle.properties
      - name: Inject API Key into gradle.properties
        if: env.skip_build != 'true'
        run: echo "MISSION_CONTROL_API_KEY=${{ secrets.MISSION_CONTROL_API_KEY }}" >> "$GITHUB_WORKSPACE/gradle.properties"

      # 10. Make gradlew executable
      - name: Make gradlew executable
        if: env.skip_build != 'true'
        run: chmod +x ./gradlew

      # 11. Write Version Name to File
      - name: Write Version Name to File
        if: env.skip_build != 'true'
        run: ./gradlew writeVersionNameToFile

      # 12. Read and Increment Version
      - name: Read and Increment Version
        if: env.skip_build != 'true'
        run: |
          VERSION_NAME=$(cat app/build/versionName.txt)
          MAJOR=$(echo $VERSION_NAME | cut -d'.' -f1)
          MINOR=$(echo $VERSION_NAME | cut -d'.' -f2)
          BUILD=$(echo $VERSION_NAME | cut -d'.' -f3)
          NEW_BUILD=$(printf "%04d" $((10#$BUILD + 1)))
          NEW_VERSION_NAME="${MAJOR}.${MINOR}.${NEW_BUILD}"
          echo "versionName=$NEW_VERSION_NAME" >> $GITHUB_ENV

      # 13. Check and Delete Existing Release
      - name: Check and Delete Existing Release
        if: env.skip_build != 'true'
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_NAME: ${{ env.versionName }}
        with:
          script: |
            const tagName = `v${process.env.VERSION_NAME}`;
            console.log(`Attempting to delete release with tag: ${tagName}`);
            
            // Fetch releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Find existing release by tag
            const existingRelease = releases.data.find(release => release.tag_name === tagName);
            if (existingRelease) {
              console.log(`Release with tag ${tagName} exists. Deleting...`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id
              });
            } else {
              console.log(`No release found with tag ${tagName}.`);
            }

            // Attempt to delete the tag reference
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`
              });
              console.log(`Deleted tag ${tagName}.`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Tag ${tagName} does not exist, no need to delete.`);
              } else {
                throw error;
              }
            }

      # 14. Wait for Deletion to Propagate
      - name: Wait for Deletion to Propagate
        if: env.skip_build != 'true'
        run: sleep 5

      # 15. Calculate BUILD_NUMBER
      - name: Calculate BUILD_NUMBER
        id: build_number
        if: env.skip_build != 'true'
        run: |
          BUILD_NUMBER=$(echo ${{ env.versionName }} | awk -F '.' '{print $NF}')
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Calculated BUILD_NUMBER: $BUILD_NUMBER"

      # 16. Run Lint Checks
      - name: Run Lint Checks
        if: env.skip_build != 'true'
        run: ./gradlew lint --warning-mode all

      # 17. Build with Gradle
      - name: Build with Gradle
        if: env.skip_build != 'true'
        run: ./gradlew assembleRelease lintVitalRelease -PBUILD_NUMBER=$BUILD_NUMBER --warning-mode all --no-configuration-cache

      # 18. Rename APK
      - name: Rename APK
        if: env.skip_build != 'true'
        run: |
          ORIGINAL_APK="app/build/outputs/apk/release/app-release.apk"
          RENAMED_APK="app/build/outputs/apk/release/io.esper.android.files_v${{ env.versionName }}.apk"
          mv "$ORIGINAL_APK" "$RENAMED_APK"
          echo "APK renamed to $RENAMED_APK"

      # 19. Upload Artifact
      - name: Upload artifact
        if: env.skip_build != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: io.esper.android.files_v${{ env.versionName }}.apk
          path: app/build/outputs/apk/release/io.esper.android.files_v${{ env.versionName }}.apk
          retention-days: 10

      # 20. Collect Release Notes
      - name: Collect Release Notes
        id: release_notes
        if: env.skip_build != 'true'
        run: |
          RECENT_COMMITS=$(git log -5 --pretty=format:"- %s")
          echo "release_notes=$RECENT_COMMITS" >> $GITHUB_ENV

      # 21. Debug Environment Variables (Optional)
      - name: Debug Environment Variables
        if: env.skip_build != 'true'
        run: |
          echo "Version Name: ${{ env.versionName }}"
          echo "Build Number: ${{ env.BUILD_NUMBER }}"
          echo "Release Notes: ${{ env.release_notes }}"

      # 22. Create GitHub Release
      - name: Create GitHub Release
        if: env.skip_build != 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.versionName }}"
          release_name: "Release v${{ env.versionName }}"
          body: ${{ env.release_notes }}
          draft: false
          prerelease: false

      # 23. Upload Release APK
      - name: Upload Release APK
        if: env.skip_build != 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/io.esper.android.files_v${{ env.versionName }}.apk
          asset_name: io.esper.android.files_v${{ env.versionName }}.apk
          asset_content_type: application/vnd.android.package-archive
