name: Android CI

on:
  push:
    branches:
      - master

permissions:
  contents: write   # Grants permission to push tags and modify repository contents

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true

      # 2. Cache Gradle packages
      - name: Cache Gradle packages
        if: env.skip_build != 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 3. Check commit message to decide whether to skip build
      - name: Check commit message
        id: check_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == "Increment versionCode to "* ]]; then
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "skip_build=false" >> $GITHUB_ENV
          fi  # Added 'fi' to close the if statement

      # 4. Set up Java 17
      - name: Set up Java 17
        if: env.skip_build != 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 5. Set up Android SDK and NDK
      - name: Set up Android SDK and NDK
        if: env.skip_build != 'true'
        uses: android-actions/setup-android@v2
        with:
          sdk-version: '33.0.0'
          ndk-version: '27.0.11718014'
          distribution-type: 'sdk'
          build-tools: '33.0.0'

      # 6. Calculate Latest Tag
      - name: Calculate Latest Tag
        id: calculate_tag
        run: |
          latest_tag=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 || echo "v1.01.0000")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest Tag: $latest_tag"

      # 7. Set up signing keystore
      - name: Set up signing keystore
        if: env.skip_build != 'true'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | openssl base64 -d -A -out keystore.jks
          echo "Keystore file created in the root directory."

      # 8. Create signing.properties
      - name: Create signing.properties
        if: env.skip_build != 'true'
        run: |
          echo "storeFile=../keystore.jks" > signing.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> signing.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> signing.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> signing.properties

      # 9. Inject API Key into gradle.properties
      - name: Inject API Key into gradle.properties
        if: env.skip_build != 'true'
        run: echo "MISSION_CONTROL_API_KEY=${{ secrets.MISSION_CONTROL_API_KEY }}" >> "$GITHUB_WORKSPACE/gradle.properties"

      # 10. Make gradlew executable
      - name: Make gradlew executable
        if: env.skip_build != 'true'
        run: chmod +x ./gradlew

      # 11. Check and Delete Existing Release
      - name: Check and Delete Existing Release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const tagName = '${{ env.latest_tag }}'.replace('refs/tags/', '');
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const existingRelease = releases.data.find(release => release.tag_name === tagName);
            if (existingRelease) {
              console.log(`Release with tag ${tagName} exists. Deleting...`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id
              });
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
              });
              console.log(`Deleted release with tag ${tagName}.`);
            } else {
              console.log(`No release found with tag ${tagName}.`);
            }

      # 12. Write Version Name to File
      - name: Write Version Name to File
        if: env.skip_build != 'true'
        run: ./gradlew writeVersionNameToFile

      # 13. Read App Version
      - name: Read App Version
        if: env.skip_build != 'true'
        run: |
          VERSION_NAME=$(cat app/build/versionName.txt)
          echo "versionName=$VERSION_NAME" >> $GITHUB_ENV
          echo "Version Name: $VERSION_NAME"

      # 14. Calculate BUILD_NUMBER
      - name: Calculate BUILD_NUMBER
        id: build_number
        if: env.skip_build != 'true'
        run: |
          latest_tag=${{ env.latest_tag }}
          # Remove the 'v' prefix
          version_core=${latest_tag#v}
          # Split the version into major, minor, and build
          IFS='.' read -r major minor build_number <<< "$version_core"
          echo "Major: $major, Minor: $minor, Build Number: $build_number"
          # Increment the build number
          BUILD_NUMBER=$(printf "%04d" $((10#$build_number + 1)))
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Calculated BUILD_NUMBER: $BUILD_NUMBER"
          # Construct the new version name
          NEW_VERSION_NAME="$major.$minor.$BUILD_NUMBER"
          echo "versionName=$NEW_VERSION_NAME" >> $GITHUB_ENV
          echo "New Version Name: $NEW_VERSION_NAME"

      # 15. Run Lint Checks
      - name: Run Lint Checks
        if: env.skip_build != 'true'
        run: ./gradlew lint --warning-mode all

      # 16. Build with Gradle
      - name: Build with Gradle
        if: env.skip_build != 'true'
        run: ./gradlew assembleRelease lintVitalRelease -PBUILD_NUMBER=$BUILD_NUMBER --warning-mode all --no-configuration-cache

      # 17. Rename APK
      - name: Rename APK
        if: env.skip_build != 'true'
        run: |
          ORIGINAL_APK="app/build/outputs/apk/release/app-release.apk"
          RENAMED_APK="app/build/outputs/apk/release/io.esper.android.files_v${{ env.versionName }}.apk"
          mv "$ORIGINAL_APK" "$RENAMED_APK"
          echo "APK renamed to $RENAMED_APK"
          ls -l app/build/outputs/apk/release/  # Added for debugging

      # 18. Upload artifact
      - name: Upload artifact
        if: env.skip_build != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: io.esper.android.files_v${{ env.versionName }}.apk
          path: app/build/outputs/apk/release/io.esper.android.files_v${{ env.versionName }}.apk
          retention-days: 10

      # 19. Collect Release Notes
      - name: Collect Release Notes
        id: release_notes
        if: env.skip_build != 'true'
        run: |
          RECENT_COMMITS=$(git log -5 --pretty=format:"- %s")
          echo "release_notes=$RECENT_COMMITS" >> $GITHUB_ENV

      # 20. Create and Push Tag BEFORE Creating Release
      - name: Create and Push Tag
        if: env.skip_build != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Check if tag exists
          if git rev-parse "v${{ env.versionName }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.versionName }} already exists. Skipping tag creation."
          else
            git tag -a "v${{ env.versionName }}" -m "Release v${{ env.versionName }}"
            git push origin "v${{ env.versionName }}"
          fi
